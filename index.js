require('dotenv').config({path: "./assets/modules/.env"})
const TelegramApi = require('node-telegram-bot-api')
const bot = new TelegramApi(process.env.devStatus ? process.env.TEST_TOKEN : process.env.DEFAULT_TOKEN, {polling: true})
const { startKeyboard, generateYearKeyboard, chooseOptions, chooseGender, generateDayKeyboard } = require('./assets/keyboard/keyboard')
const commands = JSON.parse(require('fs').readFileSync('./assets/commands/commands.json'))
const db = require('./assets/db/db.json')
const { saveData } = require('./assets/scripts/logic')

bot.setMyCommands(commands)

bot.on('message', async msg => {
    let user = db.find(user => user.username === msg.from.username)
    if (msg.text === '/start'){
        if (!user){
            db.push({
                username: msg.from.username,
                selection: "",
                yearOfBirth: "",
                monthOfBearth: "",
                dayOfBearth: "",
                gender: "",
            })
        }
        require('fs').writeFileSync('./assets/db/db.json', JSON.stringify(db, null, '\t'))
        await bot.sendPhoto(msg.chat.id, './assets/images/startimage.jpg', {caption: `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è, ${msg.from.username}! üëã\n\n\n–° —Ç–æ–±–æ–π –Ω–∞ —Å–≤—è–∑–∏ <b>–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ê—Å—Ç—Ä–æ–ª–æ–≥–æ–≤!</b> –ú—ã –ø–æ–º–æ–∂–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É, <b>–º–∞—Ç—Ä–∏—Ü—É —Å—É–¥—å–±—ã, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –Ω—É–∂–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º, –∞—Å—Ü–µ–Ω–¥–µ–Ω—Ç, –∫–∞—Ä—å–µ—Ä–Ω—ã–π —É—Å–ø–µ—Ö, –±–æ–≥–∞—Ç—Å—Ç–≤–æ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ</b> üòâ`, parse_mode: 'HTML', reply_markup: startKeyboard.reply_markup})
    }
})

bot.on('callback_query', async msg => {
    const yearOfBirth = generateYearKeyboard(msg)
    const dayOfBirth = generateDayKeyboard(msg)
    let user = db.find(user => user.username === msg.message.from.username)
    switch(msg.data){
        case 'natal_cards':
            await bot.deleteMessage(msg.message.chat.id, msg.message.message_id)
            await bot.sendMessage(msg.message.chat.id, `–û—Ç–ª–∏—á–Ω–æ, —Å–µ–π—á–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –Ω–µ–±–æ–ª—å—à—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–∞—Ä—Ç—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥ —Ç–µ–±—è!\n\n–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –≤—Å–µ–≥–æ –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤‚úçÔ∏è`, chooseOptions)
            saveData(user?.username)
            break;
        case 'create_card':
            await bot.deleteMessage(msg.message.chat.id, msg.message.message_id)
            await bot.sendMessage(msg.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ, —Å–µ–π—á–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –Ω–µ–±–æ–ª—å—à—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–∞—Ä—Ç—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥ —Ç–µ–±—è!\n\n–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –≤—Å–µ–≥–æ –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤‚úçÔ∏è", chooseGender)
            break;
        case 'male':
            await bot.deleteMessage(msg.message.chat.id, msg.message.message_id)
            await bot.sendMessage(msg.message.chat.id, "üóì–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:", yearOfBirth)
            break;
        case 'female':
            await bot.deleteMessage(msg.message.chat.id, msg.message.message_id)
            await bot.sendMessage(msg.message.chat.id, "üóì–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:", yearOfBirth)
        case 'matrix':
            await bot.deleteMessage(msg.message.chat.id, msg.message.message_id)
            await bot.sendMessage(msg.message.chat.id, `asd`)
            break
        case 'ascendent':
            await bot.deleteMessage(msg.message.chat.id, msg.message.message_id)
            await bot.sendMessage(msg.message.chat.id, `asd`)
            break;
        case parseInt(msg.data):
            console.log("msg.data")
            await bot.deleteMessage(msg.message.chat.id, msg.message.message_id)
            // await bot.sendMessage(msg.message.chat.id, "hello world", dayOfBirth)
        case 'personal_garo':
            await bot.deleteMessage(msg.message.chat.id, msg.message.message_id)
            await bot.sendMessage(msg.message.chat.id, `asd`)
            break;
        case 'relationship':
            await bot.deleteMessage(msg.message.chat.id, msg.message.message_id)
            await bot.sendMessage(msg.message.chat.id, `asd`)
            break;
        case 'success':
            await bot.deleteMessage(msg.message.chat.id, msg.message.message_id)
            await bot.sendMessage(msg.message.chat.id, `asd`)
            break;
        default:
            await bot.sendMessage(msg.message.chat.id, msg.data)
            break;
    }
})

bot.on('polling_error', console.log)