function generateYearKeyboard() {
    const currentYear = new Date().getFullYear();

    const years = [];
    let row = [];
    for (let year = 1924; year <= 2024; year++) {
        row.push({text: year.toString(), callback_data: year.toString()});
        if (row.length === 3) {
            years.push(row);
            row = [];
        }
    }

    if (row.length > 0) {
        row.push({text: currentYear.toString(), callback_data: currentYear.toString()});
        years.push(row);
    }

    years.push([{text: "<-", callback_data: "prevous"}, {text: "->", callback_data: "next"}]);

    return {
        reply_markup: JSON.stringify({
            inline_keyboard: years
        })
    };
}

function saveButtonInfo(callback){
    const buttonInfo = {
        userId: query.from.id,
        buttonText: query.data,
        date: new Date().toISOString()
    }

    require('fs').writeFileSync('', JSON.stringify(buttonInfo, null, '\t'))
}

const YearOfBirthKeyboard = generateYearKeyboard();
console.log(YearOfBirthKeyboard);



module.exports = {
    startKeyboard: {
        reply_markup: JSON.stringify({
            inline_keyboard: [
                [{text: "üåè –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞", callback_data: "natal_cards"}],
                [{text: "üîÆ –ú–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã", callback_data: "matrix"}],
                [{text: "üåö –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç", callback_data: "ascendent"}],
                [{text: "‚öõÔ∏è –õ–∏—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ –¥–∞—Ç–µ", callback_data: "personal_garo"}],
                [{text: "üíû –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —á–µ–ª–æ–≤–µ–∫–æ–º", callback_data: "relationship"}],
                [{text: "üí∏ –£—Å–ø–µ—Ö, –±–æ–≥–∞—Ç—Å—Ç–≤–æ –∏ –∏–∑–æ–±–∏–ª–∏–µ", callback_data: "success"}]
            ]
        })
    },
    chooseOptions: {
        reply_markup: JSON.stringify({
            inline_keyboard: [
                [{text: "–°–û–°–¢–ê–í–ò–¢–¨ –°–í–û–Æ –ö–ê–†–¢–£‚úÖ", callback_data: "create_card"}],
                [{text: "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É‚óÄÔ∏è", callback_data: "back"}]
            ]
        })
    },
    chooseGender: {
        reply_markup: JSON.stringify({
            inline_keyboard: [
                [{text: "–ñ–µ–Ω—Å–∫–∏–π üë±üèª‚Äç‚ôÄÔ∏è", callback_data: "female"}],
                [{text: "–ú—É–∂—Å–∫–æ–π ü§µüèª‚Äç‚ôÇÔ∏è", callback_data: "male"}]
            ]
        })
    },
}